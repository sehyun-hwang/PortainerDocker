events {}

stream {
    server {
        listen     5432;
        proxy_pass aurora.vpc:5432;
    }

    server {
    	listen     2049;
    	proxy_pass fs-34ce2754.efs.ap-northeast-2.amazonaws.com:2049;
    }
}


http {
	charset utf-8;
	proxy_intercept_errors on;
	disable_symlinks off;

	autoindex on;
	autoindex_localtime on;

	gzip on;
	gzip_http_version 1.1;
	gzip_vary on;
	gzip_comp_level 6;
	gzip_proxied any;

	brotli_static on;
	brotli on;
	brotli_comp_level 4;

	include mime.types;
	types {
	    application/wasm wasm;
	}

	map_hash_bucket_size 128;
	map $http_origin $cors {
		default "";
		~^https://(.*).hwangsehyun.com$ $http_origin;
		~^https://(.*).kbdlab.xyz$ $http_origin;
		~^https://(.*).yonsei.ac.kr$ $http_origin;
		
		~^http://localhost:(.*) $http_origin;
		~^https://(.*).stackblitz.io $http_origin;
		https://ap-northeast-2.console.aws.amazon.com $http_origin;
		https://hoppscotch.io $http_origin;
		
		~^https://(.*).beyondwork.co.kr $http_origin;
		http://demo.beyondwork.co.kr $http_origin;
		https://nextlab.s3.ap-northeast-2.amazonaws.com  $http_origin;
	}

	map $http_upgrade $connection_upgrade {
    	default upgrade;
    	'' close;
	}

	map $ssl_early_data $tls1_3_early_data {
	  "~." $ssl_early_data;
	  default "";
	}

	server {
		server_name localhost;
		listen 80;

		root /mnt;
		location ~ \.html$ {
			ssi on;
		}

		location / {
			index index.html index.js;
		}
	}


	server {
		server_name www.hwangsehyun.com;
		root /mnt;
		
		location ~ \.html$ {
			proxy_pass http://localhost;
		}

		add_header X-Frame-Options SAMEORIGIN;
		add_header Access-Control-Allow-Origin $cors;

		include /etc/nginx/conf/common.conf;
	}

	server {
		server_name hwangsehyun.com www.hwangsehyun.com;
		listen 80;

		location ^~ / {
        	return 301 https://www.hwangsehyun.com$request_uri;
        }

        include /etc/nginx/conf/common.conf;
	}
	

	server {
		listen 80 default_server;
		return 403;

		include /etc/nginx/conf/common.conf;
	}


	server {
		server_name  proxy.hwangsehyun.com;

		location /pgadmin/ {
		    proxy_pass http://pgadmin;
		    proxy_set_header X-Scheme https;
		    proxy_set_header Host $host;
		}
		
		location /stream/ {
			proxy_pass http://stream/;
		}
		
		location /stream/ws/ {
		    proxy_http_version 1.1;
		    proxy_set_header Upgrade $http_upgrade;
		    proxy_set_header Connection Upgrade;
		    proxy_set_header Host $host;
		    
		    proxy_pass http://stream/ws/;
		}

		location /Angular {
			try_files $uri =404;
		}
		location ~ ^\/angular\/(.*\.(?:css|js|map))$ {
			root /mnt;
			try_files /Angular/dist/demo/$1 =404;
		}
		location /angular {
			root /mnt;
			try_files /Angular/index.html =404;
		}

		location ~ ^\/(?:hugo|livereload.js) {
			proxy_pass http://host.docker.internal:1313;
		}
		location ~ /livereload {
			proxy_pass http://host.docker.internal:1313;

		    proxy_http_version 1.1;
    		proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection Upgrade;
			proxy_set_header Host $http_host;

        	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        	proxy_set_header X-Forwarded-Proto $scheme;
		}

		location = /browser-sync/browser-sync-client.js {
			proxy_pass http://host.docker.internal:3000;
		}
		location = /browser-sync/socket.io/ {
			proxy_pass http://host.docker.internal:3000;
			proxy_http_version 1.1;
    		proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection Upgrade;
		}

		location /browser-sync/ {
			proxy_pass http://host.docker.internal:3000/;
		}
		
		location /portainer/ {
			proxy_pass http://portainer:9000/;
		}
		location /portainer/api/websocket/ {
			proxy_pass http://portainer:9000/api/websocket/;
			
			proxy_set_header X-Real-IP $remote_addr;
			add_header Access-Control-Allow-Origin $cors always;
			proxy_set_header Upgrade $http_upgrade;
	    	proxy_set_header Connection Upgrade;
		}
		

		location = /socket.io/ {
			set $port 8080;
			if ($arg_port) {
				set $port $arg_port;
	        	error_page 502 /502;
			}

			proxy_pass http://host.docker.internal:$port;
			proxy_http_version 1.1;

			proxy_set_header X-Real-IP $remote_addr;
			add_header Access-Control-Allow-Origin $cors always;
			proxy_set_header Upgrade $http_upgrade;
	    	proxy_set_header Connection Upgrade;
		}

		location / {
			proxy_pass http://host.docker.internal:8080/;

			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Connection "";

			add_header Access-Control-Allow-Origin $cors always;
			add_header Access-Control-Allow-Headers Content-Type always;
		}

		include /etc/nginx/conf/common.conf;
	}
	

}
